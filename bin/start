#!/bin/bash

# スクリプトの実行中にエラーが発生した場合、即座に停止する
set -e 

VENV_DIR="services/api/.venv"
CONTAINER_NAME="postgres_db"
DATABASE_NAME="school_db"
NETWORK_NAME="school_app"

START_IOS_APP=false
START_ANDROID=false
API_PORT=8000
APP_PORT=8081
BASE_DIR=$(dirname ${0})

cd "$(dirname ${0})/.."
. bin/load_env

# 環境変数を読み込んで.envファイルを生成
eval "echo \"$(cat services/api/env.template)\"" > services/api/.env

# Dockerネットワークを作成
echo "Creating Docker network '$NETWORK_NAME' if not exists..."
docker network ls | grep -wq $NETWORK_NAME || docker network create $NETWORK_NAME

# 既存のコンテナがある場合はそれを再利用する
if docker ps -a --format '{{.Names}}' | grep -wq $CONTAINER_NAME; then
    echo "Container '$CONTAINER_NAME' already exists. Starting the container..."
    docker start $CONTAINER_NAME || true
else
    echo "Starting PostgreSQL database container..."
    docker-compose -f docker-compose.db.yml up -d
fi

# データベースが存在しない場合は作成
echo "Creating the database '$DATABASE_NAME'..."
docker exec $CONTAINER_NAME psql -U postgres -lqt | cut -d \| -f 1 | grep -qw $DATABASE_NAME
if [ $? -eq 1 ]; then
    docker exec $CONTAINER_NAME psql -U postgres -c "CREATE DATABASE $DATABASE_NAME;"
    echo "Database '$DATABASE_NAME' created!"
fi

# オプションの確認
while getopts "ia" opt; do
    case ${opt} in
        # オプションが i の場合
        i )
            START_IOS_APP=true
            ;;
        # オプションが a の場合
        a )
            START_ANDROID=true
            ;;
        \? )
            echo "Usage: $(basename $0) [-i] [-a]"
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# 仮想環境が既に存在するかを確認
if [ -d "$VENV_DIR" ]; then
    echo "Virtual environment already exists. Activating it..."
else
    # 仮想環境が存在しない場合は新規作成
    echo "Creating a new virtual environment..."
    cd services/api/
    poetry install
    echo "Virtual environment created!"
    cd ../../
fi

cd services/api || exit 1

# 仮想環境を有効化
source $(poetry env info --path)/bin/activate

# 指定したポートを使用しているプロセスを停止する関数
function kill_process_using_port {
    local port=$1
    local process_ids=$(lsof -ti :$port) 
    if [ -n "$process_ids" ]; then
        echo "Terminating processes using port $port..."
        for pid in $process_ids; do
            if [[ "$pid" =~ ^[0-9]+$ ]]; then  
                kill -9 "$pid"  
            else
                echo "Invalid process ID: $pid"
            fi
        done
    else
        echo "No processes found using port $port."
    fi
}

# APIポートとアプリケーションポートのプロセスを停止
echo "Checking and terminating processes using ports: $API_PORT, $APP_PORT..."
kill_process_using_port "$API_PORT"
kill_process_using_port "$APP_PORT"

# アプリケーションサーバーを起動
echo "Starting the application server..."

# migrate
echo "Migrating the database..."
alembic upgrade head

# シミュレータが動いている状態
if [ "$START_IOS_APP" = true ]; then
    uvicorn main:app --host 0.0.0.0 --port 8000 --reload &

    cd ../client
    echo "Starting the iOS simulator..."
    npm install
    npm run ios 
   
elif [ "$START_ANDROID" = true ]; then
    uvicorn main:app --host 0.0.0.0 --port 8000 --reload &

    cd ../client
    echo "Starting the Android emulator..."
    npm install
    npm run android
else
    uvicorn main:app --host 0.0.0.0 --port 8000 --reload &
fi
